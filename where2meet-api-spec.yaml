openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'where2meet'
  description: where2meet
servers:
  - url: "https://where2meet-backend-wtlln4sbra-et.a.run.app/w2m"
    description: Production

paths:
  /login:
    post:
      summary: Login
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  example: w2mdev1
                password:
                  type: string
                  example: Dev1password
      responses:
        200:
          description: Login Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login Successful
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjg1MzUxMzA3fQ.CGwLOab58FOLz1nuDqCV4cHZCdzbfe13LlhFGPisGtM
                      user:
                        $ref: '#/components/schemas/user'
        400:
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                Wrong username:
                  value:
                    message: User does not exist
                Wrong password:
                  value:
                    message: Invalid password
  /register:
    post:
      summary: Register
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
              example:
                username: w2mdev1
                password: Dev1password
                email: w2mdev1@gmail.com
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User created
  /createGroup:
    post:
      summary: Create Group
      description: Create a group and add the user as admin
      responses:
        201:
          description: Group created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group created
                  data:
                    type: object
                    properties:
                      group:
                        $ref: '#/components/schemas/group'
  /joinGroup:
    post:
      summary: Join Group
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                code:
                  $ref: '#/components/schemas/GroupCode'
      responses:
        200:
          description: Group joined
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group joined
                  data:
                    type: object
                    properties:
                      group:
                        $ref: '#/components/schemas/group'
        400:
          description: Group not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group not found
  /getGroupByUserId:
    get:
      summary: Get Groups By User Id
      parameters:
        - name: pageSize
          schema:
            type: integer
          in: query
          required: true
        - name: pageNumber
          schema:
              type: integer
          in: query
          required: true
      responses:
        200:
          description: Groups found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Groups found
                  data:
                    type: object
                    properties:
                      groups:
                        type: array
                        items:
                          $ref: '#/components/schemas/group'

  /getGroupByGroupId:
    get:
      summary: Get Group By Group Id
      parameters:
        - name: groupId
          schema:
            $ref: '#/components/schemas/GroupId'
          in: query
          required: true
      responses:
        200:
          description: Group found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Groups found
                  data:
                    $ref: '#/components/schemas/group'
  /updateGroup:
    put:
      summary: Update Group
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                groupId:
                  $ref: '#/components/schemas/GroupId'
                name:
                  type: string
                  example: nax mobil
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group updated
                  data:
                    $ref: '#/components/schemas/group'
  /deleteMember:
    delete:
      summary: Delete Member
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                groupId:
                  $ref: '#/components/schemas/GroupId'
                userId:
                  $ref: '#/components/schemas/UserId'
      responses:
        200:
          description: Member deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member deleted
  /deleteGroup:
    delete:
      summary: Delete Group
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                groupId:
                  $ref: '#/components/schemas/GroupId'
      responses:
        200:
          description: Group deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group deleted
  /moods:
    get:
      summary: Get list of moods
      responses:
        200:
          description: Moods found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Moods found
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/mood'
  /userGroup/location/{groupId}:
    put:
      summary: Set location of a user on a group
      parameters:
        - name: groupId
          schema:
            $ref: '#/components/schemas/GroupId'
          in: path
          required: true
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                lang:
                  type: number
                lat:
                  type: number
      responses:
        200:
          description: User location set
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User location set
        400:
          description: Group not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group not found
  /userGroup/mood/{groupId}:
    put:
      summary: Set mood of a user on a group
      parameters:
        - name: groupId
          schema:
            $ref: '#/components/schemas/GroupId'
          in: path
          required: true
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                moods:
                  type: array
                  items:
                    $ref: '#/components/schemas/MoodId' # ini ntar dicek apakah bener bisa keterima berbentuk array
      responses:
        200:
          description: User location set
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User location set
        400:
          description: Group not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group not found
components:
  schemas:
    UserId:
      description: A unique identifier of a user
      type: integer
      example: 1
    user:
      description: A user object
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        username:
          type: string
          example: w2mdev1
        email:
          type: string
          example: w2mdev1@gmail.com
    GroupId:
      description: A unique identifier of a group
      type: integer
      example: 1
    GroupCode:
      description: A unique identifier of a group in code form
      type: string
      example: c9eeWk
    group:
      description: A group object
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        status:
          type: string
          enum:
            - Pending
            - Done
        name:
          type: string
          example: nax mobil
        adminId:
          $ref: '#/components/schemas/UserId'
        result:
          type: string
        code:
          $ref: '#/components/schemas/GroupCode'
        createdAt:
          type: string
          example: 2023-05-31T15:00:38.171Z
        updatedAt:
          type: string
          example: 2023-05-31T15:00:38.171Z
    MoodId:
      description: A unique identifier of a mood
      type: integer
      example: 1
    mood:
      description: A group object
      type: object
      properties:
        id:
          $ref: '#/components/schemas/MoodId'
        name:
          type: string
          example: 😄 Happy
    userGroup:
      description: Signifies a many-to-many relation between users and groups
      type: object
      properties:
        UserId:
          $ref: '#/components/schemas/UserId'
        GroupId:
          $ref: '#/components/schemas/GroupId'
        mood:
          type: array
          items:
            $ref: '#/components/schemas/MoodId'
        lang:
          type: number
          example: -5.234567
        lat:
          type: number
          example: 1.234567
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []